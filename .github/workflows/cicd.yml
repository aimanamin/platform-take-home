name: CICD Pipeline
on:
  push:
    branches:
      - main
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - name: Run golangci-lint
        run: golangci-lint run ./...

  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Run tests
        run: go test -v ./...

  proto-gen:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      GOTOOLCHAIN: local
      GOFLAGS: "-buildvcs=false"
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
      
      - name: Install Protobuf Tools
        run: |
          # Install protoc
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

          # Install Go protobuf generators
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          
          # Install additional protobuf generators
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
          
          # Install mockgen for mock generation
          go install go.uber.org/mock/mockgen@latest

          # Install Buf for proto generation
          curl -sSL https://github.com/bufbuild/buf/releases/download/v1.30.0/buf-Linux-x86_64 -o /usr/local/bin/buf
          chmod +x /usr/local/bin/buf

      - name: Generate Proto Files and Mocks
        run: |
          # Generate proto files
          cd proto
          buf generate
          cd ..
          
          # Generate mocks
          cd api/types
          mockgen -source=api_grpc.pb.go -destination=api_mock.pb.go -package=types

      - name: Upload Generated Files
        uses: actions/upload-artifact@v4
        with:
          name: generated-proto
          path: api/types/
          retention-days: 1

  build-and-cache:
    needs: [test, proto-gen]
    runs-on: ubuntu-latest
    env:
      GOTOOLCHAIN: local
      GOFLAGS: "-buildvcs=false"
    steps:
      - uses: actions/checkout@v4

      - name: Download Generated Proto Files
        uses: actions/download-artifact@v4
        with:
          name: generated-proto
          path: api/types/
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
      
      - name: Download dependencies
        run: go mod download
      
      - name: Build
        run: go build -v ./...

  Build:
    name: Build
    needs: [build-and-cache]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Generated Proto Files
        uses: actions/download-artifact@v4
        with:
          name: generated-proto
          path: api/types/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit hash
        id: get-commit-hash
        run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"
      - name: Get timestamp
        id: get-timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
      - name: Inject Variables
        uses: cschleiden/replace-tokens@v1
        env:
          POSTGRES_DSN: ${{ secrets.POSTGRES_DSN }}
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        with:
          tokenPrefix: '#{'
          tokenSuffix: '}'
          files: '["k8s/**.yml"]'

      - name: Deploy
        run: |
          aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}
          kubectl apply -f k8s

